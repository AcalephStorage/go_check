#!/usr/bin/env bash

clean() {
	echo '---> Cleaning'
	rm -rf ./build
}

test() {
	echo '---> Testing'
	mkdir -p ./build/test
	go test -outputdir build/test ./...
}

build() {
	export GOOS=$1
	export GOARCH=$2
	echo "---> Building $GOOS $GOARCH"
	mkdir -p ./build/bin/$GOOS-$GOARCH
	for i in *; do
		[ -d "$i" ] && \
		[ "Godeps" != "$i" ] && \
		[ "build" != "$i" ] && \
		go build -o build/bin/$GOOS-$GOARCH/check-$i ./$i && \
		echo " - check-$i"
	done
}

package() {
	build linux 386
	build linux amd64
	echo '---> Packaging'
	mkdir -p ./build/dist
	tar -zcf ./build/dist/go-checks-linux-386.tar.gz -C ./build/bin/linux-386 .
	echo ' - build/disk/go-checks-linux-386.tar.gz'
	tar -zcf ./build/dist/go-checks-linux-amd64.tar.gz -C ./build/bin/linux-amd64 .
	echo ' - build/disk/go-checks-linux-amd64.tar.gz'
}

release() {
	local version=$1;	shift;
	local user=$1;		shift;
	local api_key=$1;	shift;

	local repo=generic
	local app_name=go-checks

	local archs=( '386' 'amd64' )

	if [[ "$version" == "latest" ]]; then
		echo "--> Removing Latest Version"
		curl -s -X DELETE -u ${user}:${api_key} https://api.bintray.com/packages/${user}/${repo}/${app_name}/versions/${version}
		echo
	fi

	for arch in ${archs[@]}; do
		echo "--> Releasing version: ${version}"
		curl -s -T "build/dist/${app_name}-linux-${arch}.tar.gz" -u "${user}:${api_key}" "https://api.bintray.com/content/${user}/${repo}/${app_name}/${version}/${app_name}-linux-${arch}-${version}.tar.gz"
		echo	
	done
	curl -s -X POST -u ${user}:${api_key} https://api.bintray.com/content/${user}/${repo}/${app_name}/${version}/publish
	echo 
}

main() {
	set -eo pipefail
	while [ "$#" != "0" ]; do 
		case "$1" in
		clean)		shift;		clean;;
		test)		shift;		test;;
		build)		shift;		build;;
		package)	shift;		package;;
		release)	shift;		release $@;;
		*)			shift;		test; 		exit 0;;
		esac
	done
}

main "$@"